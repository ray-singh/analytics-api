services:
  # Infrastructure services
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2182:2181"  
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
      - "29092:29092"   
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s


  timescaledb:
    image: timescale/timescaledb:latest-pg14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-stockanalytics}
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Base image build
  base-image:
    build:
      context: .
      dockerfile: Dockerfile.base
    image: analytics-api-base:latest
    env_file: .env
    environment:
      - BUILD_CHECK=true  # Skip connection checks during build
    profiles:
      - build-only
    command: python -m scripts.env_check

  # Application services
  market-data:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        BASE_IMAGE: analytics-api-base:latest
        SERVICE_NAME: market_data
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOG_LEVEL=INFO
      - STREAM_SYMBOLS=${STREAM_SYMBOLS:-AAPL}
      - TWELVEDATA_API_KEY=${TWELVEDATA_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - PYTHONUNBUFFERED=1
    depends_on:
      kafka:
        condition: service_healthy  
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep 'python -m services.market_data' | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  aggregation:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        BASE_IMAGE: analytics-api-base:latest
        SERVICE_NAME: aggregation
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
      - market-data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-m", "services.aggregation.src.healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  analytics:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        BASE_IMAGE: analytics-api-base:latest
        SERVICE_NAME: analytics
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
      - aggregation
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-m", "services.analytics.src.healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  persistence:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        BASE_IMAGE: analytics-api-base:latest
        SERVICE_NAME: persistence
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@timescaledb:5432/${POSTGRES_DB:-stockanalytics}
    depends_on:
      - kafka
      - timescaledb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-m", "services.persistence.src.healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        BASE_IMAGE: analytics-api-base:latest
        SERVICE_NAME: api
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@timescaledb:5432/${POSTGRES_DB:-stockanalytics}
    depends_on:
      - kafka
      - timescaledb
      - persistence
    restart: unless-stopped
    command: uvicorn services.api.src.main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Initialization jobs
  init-kafka:
    build:
      context: .
      dockerfile: Dockerfile.init
    depends_on:
      - kafka
    command: python -m scripts.create_topics
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    profiles:
      - init

  init-db:
    build:
      context: .
      dockerfile: Dockerfile.init
    depends_on:
      - timescaledb
    command: python -m scripts.init_db
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@timescaledb:5432/${POSTGRES_DB:-stockanalytics}
    profiles:
      - init

  seed-data:
    build:
      context: .
      dockerfile: Dockerfile.init
    depends_on:
      - timescaledb
    command: python -m scripts.seed_demo_data
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@timescaledb:5432/${POSTGRES_DB:-stockanalytics}
      - SYMBOLS=${SEED_SYMBOLS:-AAPL,MSFT,GOOG,AMZN,TSLA}
      - DAYS=${SEED_DAYS:-30}
    profiles:
      - init

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    depends_on:
      - timescaledb

volumes:
  zookeeper_data:
  kafka_data:
  timescaledb_data:
  pgadmin_data: